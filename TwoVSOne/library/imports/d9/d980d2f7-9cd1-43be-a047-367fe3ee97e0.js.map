{"version":3,"sources":["..\\..\\..\\..\\assets\\Script/assets\\Script\\chessinit.js"],"names":["Game","cc","Class","extends","Component","properties","chessPrefab","default","type","Prefab","occupied","occupiedcolor","gameState","lastNode","prepare","directionX","directionY","ctor","selectchess","event","chessList","distance","i","d","pDistance","v2","getLocationX","getLocationY","convertToWorldSpaceAR","push","min","minpos","j","chessinit","self","Node","y","x","newNode","instantiate","game","node","addChild","setPosition","p","width","height","setContentSize","opacity","on","EventType","MOUSE_DOWN","chessNode","indexOf","position","Math","max","alert","getComponent","Sprite","spriteFrame","SpriteFrame","url","raw","k","length","splice","count","flag","temp","s","parseInt","r","console","log","start"],"mappings":"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","file":"chessinit.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["var Game = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        chessPrefab: {//棋子的预制资源\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        occupied: {//记录当前棋盘中被占用的节点位置\r\n            default: []\r\n        },\r\n        occupiedcolor: {//记录当前棋盘中被占用的节点颜色 0：无子 1：白色 2：黑色\r\n            default: []\r\n        },\r\n        gameState: {// 游戏顺序\r\n            default: 'white'\r\n        },\r\n        lastNode: {// 上一步棋子位置\r\n            default: 0\r\n        },\r\n        prepare: {// 是否是准备走棋子 0：否 1：是\r\n            default: 0\r\n        },\r\n        directionX: {//X轴\r\n            default: []\r\n        },\r\n        directionY: {//Y轴\r\n            default: []\r\n        },\r\n    },\r\n    //构造函数\r\n    ctor: function () {\r\n        // 声明实例变量并赋默认值\r\n        this.occupied = [1, 2, 3, 4, 5, 21, 22, 23, 24, 25];\r\n        this.occupiedcolor = [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1];\r\n        this.directionX = [1, -1];\r\n        this.directionY = [5, -5];\r\n    },\r\n    //返回点击的棋子节点\r\n    selectchess(event, chessList) {\r\n        var distance = [];\r\n        for (var i = 0; i < 25; i++) {\r\n            //计算鼠标点击位置和各棋子节点之间的距离\r\n            //将棋子节点的坐标转化为世界坐标系\r\n            var d = cc.pDistance(cc.v2(event.getLocationX(), event.getLocationY()), chessList[i + 1].convertToWorldSpaceAR(cc.v2(0, 0)));\r\n            distance.push(d);\r\n        };\r\n        var min = distance[0];\r\n        var minpos = 0;\r\n        //取距离最近的下标，即棋子节点位置\r\n        for (var j = 1; j < 25; j++) {\r\n            if (distance[j] < min) {\r\n                min = distance[j]\r\n                minpos = j;\r\n            }\r\n        }\r\n\r\n        return minpos;\r\n    },\r\n    chessinit() {\r\n        var self = this;\r\n        var chessList = [cc.Node];//棋子从下标1开始           \r\n        for (var y = 0; y < 5; y++) {\r\n            for (var x = 0; x < 5; x++) {\r\n                var newNode = cc.instantiate(this.chessPrefab);//复制Chess预制资源\r\n                //为了调用类里面的静态方法，需要将类实例化\r\n                var game = new Game();\r\n                this.node.addChild(newNode);\r\n                newNode.setPosition(cc.p(x * (this.node.width / 4), y * (this.node.height / 4)));//根据棋盘和棋子大小计算使每个棋子节点位于指定位置\r\n                newNode.setContentSize(this.node.width / 6, this.node.height / 6);\r\n                newNode.opacity = 0;\r\n                chessList.push(newNode);\r\n                newNode.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\r\n                    //显示此棋子节点 节点从1开始 所以需要+1\r\n                    var chessNode = game.selectchess(event, chessList) + 1;\r\n                    if (game.occupied.indexOf(chessNode) == -1) {\r\n                        game.occupied.push(chessNode);\r\n                    }\r\n                    //console.log(game.occupied);\r\n                    //点击棋子变为半透明状态\r\n                    if (chessList[chessNode].opacity != 0) {\r\n                        chessList[chessNode].opacity = 128;\r\n                        game.prepare = 1;\r\n                        game.lastNode = chessNode;\r\n                    } else {\r\n                        if (game.prepare == 1) {\r\n                            if (game.lastNode != 0) {//判断不能跨棋子移动\r\n                                if (chessList[chessNode].position.x == chessList[game.lastNode].position.x) {\r\n                                    var min = Math.min(chessNode, game.lastNode) + 5;\r\n                                    var max = Math.max(chessNode, game.lastNode);\r\n                                    for (var i = min; i < max; i = i + 5) {\r\n                                        if (game.occupied.indexOf(i) != -1) {\r\n                                            alert(\"不能跨越其他棋子！\");\r\n                                            chessList[game.lastNode].opacity = 255;\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (chessList[chessNode].position.y == chessList[game.lastNode].position.y) {\r\n                                    var min = Math.min(chessNode, game.lastNode) + 1;\r\n                                    var max = Math.max(chessNode, game.lastNode);\r\n                                    for (var i = min; i < max; i++) {\r\n                                        if (game.occupied.indexOf(i) != -1) {\r\n                                            alert(\"不能跨越其他棋子！\");\r\n                                            chessList[game.lastNode].opacity = 255;\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (chessList[chessNode].position.x != chessList[game.lastNode].position.x && chessList[chessNode].position.y != chessList[game.lastNode].position.y) {\r\n                                    alert(\"不能沿斜线移动棋子！\");\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            //目标棋子节点显示，上一棋子节点透明\r\n                            if (game.gameState == 'white') {\r\n                                chessList[chessNode].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/whitechess.png'));\r\n                                chessList[chessNode].opacity = 255;\r\n                                chessList[game.lastNode].opacity = 0;\r\n                                //console.log(game.lastNode);\r\n                                //将上一棋子节点从occupied中删除\r\n                                for (var k = 0; k < game.occupied.length; k++) {\r\n                                    if (game.occupied[k] == game.lastNode) {\r\n                                        game.occupied.splice(k, 1);\r\n                                    }\r\n                                }\r\n                                game.prepare = 0;\r\n                                //判断胜负\r\n                                var count = 1;\r\n                                var flag = true;\r\n                                var temp = chessNode;\r\n                                var s = parseInt(chessNode/5);\r\n                                var r = (chessNode%5 == 0) ? 5 : chessNode%5;\r\n                                console.log(game.occupied);\r\n                                console.log(temp+' '+s+' '+r);\r\n                                //X轴 j=0 X右侧；j=1 X左侧\r\n                                for (var j = 0; j < 2; j++) {\r\n                                    flag = true;\r\n                                    while (flag && temp > s * 5 && temp < (s + 1) * 5) {\r\n                                        temp = temp + game.directionX[j];\r\n                                        console.log(game.occupied.indexOf(temp));\r\n                                        if (game.occupied.indexOf(temp) != -1) {\r\n                                            count++;\r\n                                            console.log('countX:' + count);\r\n                                        } else {\r\n                                            flag = false;\r\n                                        }\r\n                                    }\r\n                                    temp = chessNode;\r\n                                }\r\n                                count = 1;\r\n                                //y轴 j=0 y右侧；j=1 y左侧\r\n                                for (var j = 0; j < 2; j++) {\r\n                                    flag = true;\r\n                                    while (flag && temp >= r && temp <= 20+r) {\r\n                                        temp = temp + game.directionY[j];\r\n                                        if (game.occupied.indexOf(temp) != -1) {\r\n                                            count++;\r\n                                            console.log('countY:' + count);\r\n                                        } else {\r\n                                            flag = false;\r\n                                        }\r\n                                    }\r\n                                    temp = chessNode;\r\n                                }\r\n                                \r\n\r\n                            } else {\r\n                                chessList[chessNode].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/blackchess.png'));\r\n                                chessList[chessNode].opacity = 255;\r\n                                chessList[game.lastNode].opacity = 0;\r\n                                for (var k = 0; k < game.occupied.length; k++) {\r\n                                    if (game.occupied[k] == game.lastNode) {\r\n                                        game.occupied.splice(k, k + 1);\r\n                                    }\r\n                                }\r\n                                game.prepare = 0;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                });\r\n            };\r\n        };\r\n        //初始化棋盘\r\n        for (var i = 0; i < 5; i++) {\r\n            chessList[i + 1].opacity = 255;\r\n            chessList[25 - i].opacity = 255;\r\n            chessList[25 - i].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/whitechess.png'));\r\n        }\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start() {\r\n        this.chessinit();\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}