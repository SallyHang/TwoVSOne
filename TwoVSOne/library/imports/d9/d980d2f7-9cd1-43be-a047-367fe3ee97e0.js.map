{"version":3,"sources":["..\\..\\..\\..\\assets\\Script/assets\\Script\\chessinit.js"],"names":["Game","cc","Class","extends","Component","properties","chessPrefab","default","type","Prefab","chess","Node","whitechessPrefab","gameState","lastNode","prepare","selectchess","event","chessList","distance","i","d","pDistance","v2","getLocationX","getLocationY","convertToWorldSpaceAR","push","min","minpos","j","chessinit","self","y","x","newNode","instantiate","game","node","addChild","setPosition","p","width","height","setContentSize","opacity","on","EventType","MOUSE_DOWN","chessNode","console","log","getComponent","Sprite","spriteFrame","SpriteFrame","url","raw","start"],"mappings":"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","file":"chessinit.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["var Game = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        chessPrefab: {//棋子的预制资源\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        chess: {//棋子节点\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        whitechessPrefab: {//棋子的预制资源\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        gameState: {// 游戏顺序\r\n            default: 'white'\r\n        },\r\n        lastNode: {// 上一步棋子位置\r\n            default: 0\r\n        },\r\n        prepare: {// 是否是准备走棋子 0：否 1：是\r\n            default: 0\r\n        },\r\n    },\r\n    //返回点击的棋子节点\r\n    selectchess(event, chessList) {\r\n        var distance = [];\r\n        for (var i = 0; i < 25; i++) {\r\n            //计算鼠标点击位置和各棋子节点之间的距离\r\n            //将棋子节点的坐标转化为世界坐标系\r\n            var d = cc.pDistance(cc.v2(event.getLocationX(), event.getLocationY()), chessList[i + 1].convertToWorldSpaceAR(cc.v2(0, 0)));\r\n            distance.push(d);\r\n        };\r\n        var min = distance[0];\r\n        var minpos = 0;\r\n        //取距离最近的下标，即棋子节点位置\r\n        for (var j = 1; j < 25; j++) {\r\n            if (distance[j] < min) {\r\n                min = distance[j]\r\n                minpos = j;\r\n            }\r\n        }\r\n\r\n        return minpos;\r\n    },\r\n    chessinit() {\r\n        var self = this;\r\n        var chessList = [cc.Node];//棋子从下标1开始           \r\n        for (var y = 0; y < 5; y++) {\r\n            for (var x = 0; x < 5; x++) {\r\n                var newNode = cc.instantiate(this.chessPrefab);//复制Chess预制资源\r\n                //为了调用类里面的静态方法，需要将类实例化\r\n                var game = new Game();\r\n                this.node.addChild(newNode);\r\n                newNode.setPosition(cc.p(x * (this.node.width / 4), y * (this.node.height / 4)));//根据棋盘和棋子大小计算使每个棋子节点位于指定位置\r\n                newNode.setContentSize(this.node.width / 6, this.node.height / 6);\r\n                newNode.opacity = 0;\r\n                chessList.push(newNode);\r\n                newNode.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\r\n                    var chessNode = game.selectchess(event, chessList);\r\n                    //显示此棋子节点 节点从1开始 所以需要+1\r\n                    //if (game.gameState == 'white' && chessList[chessNode + 1].getComponent(cc.Sprite).spriteFrame != null) {\r\n                    //   chessList[chessNode + 1].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/clickwhite.png'));\r\n                    //}\r\n                    console.log(chessList[chessNode + 1].opacity);\r\n                    console.log(game.prepare);\r\n                    //if(game.lastNode != 0){\r\n                    //     newNode.getLocationX;\r\n                    //}\r\n                    if (chessList[chessNode + 1].opacity != 0) {\r\n                        if (game.gameState == 'white') {\r\n                            chessList[chessNode + 1].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/clickwhite.png'));\r\n                            game.prepare = 1;\r\n                            game.lastNode = chessNode + 1;\r\n                            console.log('white:' + game.gameState + game.prepare);\r\n                        } else {\r\n                            chessList[chessNode + 1].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/clickblack.png'));\r\n                            game.prepare = 1;\r\n                            game.lastNode = chessNode + 1;\r\n                        };\r\n                    } else {\r\n                        if (game.prepare == 1) {\r\n                            if (game.gameState == 'white') {\r\n                                console.log('prepare:' + game.gameState + game.prepare);\r\n                                chessList[chessNode + 1].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/whitechess.png'));\r\n                                chessList[chessNode + 1].opacity = 255;\r\n                                chessList[game.lastNode].opacity = 0;\r\n                                game.prepare=0;\r\n                            } else {\r\n                                chessList[chessNode + 1].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/blackchess.png'));\r\n                                chessList[chessNode + 1].opacity = 255;\r\n                                chessList[game.lastNode].opacity = 0;\r\n                                game.prepare=0;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    //if chess != null{if white white.png prepare =1 else black.png prepare=1}\r\n                    //else {if prepare =1 }\r\n                });\r\n            };\r\n        };\r\n        for (var i = 0; i < 5; i++) {\r\n            chessList[i + 1].opacity = 255;\r\n            chessList[25 - i].opacity = 255;\r\n            chessList[25 - i].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/whitechess.png'));\r\n            //chessList[25 - i].opacity = 255;\r\n        }\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start() {\r\n        this.chessinit();\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}