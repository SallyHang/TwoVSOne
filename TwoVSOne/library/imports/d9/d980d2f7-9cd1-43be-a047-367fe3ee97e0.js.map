{"version":3,"sources":["..\\..\\..\\..\\assets\\Script/assets\\Script\\chessinit.js"],"names":["Game","cc","Class","extends","Component","properties","chessPrefab","default","type","Prefab","occupied","gameState","lastNode","prepare","ctor","selectchess","event","chessList","distance","i","d","pDistance","v2","getLocationX","getLocationY","convertToWorldSpaceAR","push","min","minpos","j","chessinit","self","Node","y","x","newNode","instantiate","game","node","addChild","setPosition","p","width","height","setContentSize","opacity","on","EventType","MOUSE_DOWN","chessNode","indexOf","console","log","position","Math","max","alert","getComponent","Sprite","spriteFrame","SpriteFrame","url","raw","k","length","splice","start"],"mappings":"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","file":"chessinit.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["var Game = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        chessPrefab: {//棋子的预制资源\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        occupied: {//记录当前棋盘中被占用的节点位置\r\n            default: []\r\n        },\r\n        gameState: {// 游戏顺序\r\n            default: 'white'\r\n        },\r\n        lastNode: {// 上一步棋子位置\r\n            default: 0\r\n        },\r\n        prepare: {// 是否是准备走棋子 0：否 1：是\r\n            default: 0\r\n        },\r\n    },\r\n    //构造函数\r\n    ctor: function () {\r\n        // 声明实例变量并赋默认值\r\n        this.occupied = [1,2,3,4,5,21,22,23,24,25];\r\n    },\r\n    //返回点击的棋子节点\r\n    selectchess(event, chessList) {\r\n        var distance = [];\r\n        for (var i = 0; i < 25; i++) {\r\n            //计算鼠标点击位置和各棋子节点之间的距离\r\n            //将棋子节点的坐标转化为世界坐标系\r\n            var d = cc.pDistance(cc.v2(event.getLocationX(), event.getLocationY()), chessList[i + 1].convertToWorldSpaceAR(cc.v2(0, 0)));\r\n            distance.push(d);\r\n        };\r\n        var min = distance[0];\r\n        var minpos = 0;\r\n        //取距离最近的下标，即棋子节点位置\r\n        for (var j = 1; j < 25; j++) {\r\n            if (distance[j] < min) {\r\n                min = distance[j]\r\n                minpos = j;\r\n            }\r\n        }\r\n\r\n        return minpos;\r\n    },\r\n    chessinit() {\r\n        var self = this;\r\n        var chessList = [cc.Node];//棋子从下标1开始           \r\n        for (var y = 0; y < 5; y++) {\r\n            for (var x = 0; x < 5; x++) {\r\n                var newNode = cc.instantiate(this.chessPrefab);//复制Chess预制资源\r\n                //为了调用类里面的静态方法，需要将类实例化\r\n                var game = new Game();\r\n                this.node.addChild(newNode);\r\n                newNode.setPosition(cc.p(x * (this.node.width / 4), y * (this.node.height / 4)));//根据棋盘和棋子大小计算使每个棋子节点位于指定位置\r\n                newNode.setContentSize(this.node.width / 6, this.node.height / 6);\r\n                newNode.opacity = 0;\r\n                chessList.push(newNode);\r\n                newNode.on(cc.Node.EventType.MOUSE_DOWN, function (event) {\r\n                    //显示此棋子节点 节点从1开始 所以需要+1\r\n                    var chessNode = game.selectchess(event, chessList) + 1;\r\n                    if (game.occupied.indexOf(chessNode) == -1) {\r\n                        game.occupied.push(chessNode);\r\n                    }\r\n                    console.log(game.occupied);\r\n                    //点击棋子变为半透明状态\r\n                    if (chessList[chessNode].opacity != 0) {\r\n                        chessList[chessNode].opacity = 128;\r\n                        game.prepare = 1;\r\n                        game.lastNode = chessNode;\r\n                    } else {\r\n                        if (game.prepare == 1) {\r\n                            if (game.lastNode != 0) {//判断不能跨棋子移动\r\n                                if (chessList[chessNode].position.x == chessList[game.lastNode].position.x) {\r\n                                    var min = Math.min(chessNode, game.lastNode) + 5;\r\n                                    var max = Math.max(chessNode, game.lastNode);\r\n                                    for (var i = min; i < max; i = i + 5) {\r\n                                        if (game.occupied.indexOf(i) != -1) {\r\n                                            alert(\"不能跨越其他棋子！\");\r\n                                            chessList[game.lastNode].opacity = 255;\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (chessList[chessNode].position.y == chessList[game.lastNode].position.y) {\r\n                                    var min = Math.min(chessNode, game.lastNode) + 1;\r\n                                    var max = Math.max(chessNode, game.lastNode);\r\n                                    for (var i = min; i < max; i++) {\r\n                                        if (game.occupied.indexOf(i) != -1) {\r\n                                            alert(\"不能跨越其他棋子！\");\r\n                                            chessList[game.lastNode].opacity = 255;\r\n                                            return false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            //目标棋子节点显示，上一棋子节点透明\r\n                            if (game.gameState == 'white') {\r\n                                chessList[chessNode].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/whitechess.png'));\r\n                                chessList[chessNode].opacity = 255;\r\n                                chessList[game.lastNode].opacity = 0;\r\n                                console.log(game.lastNode);\r\n                                //将上一棋子节点从occupied中删除\r\n                                for (var k = 0; k < game.occupied.length; k++) {\r\n                                    if (game.occupied[k] == game.lastNode) {\r\n                                        game.occupied.splice(k, 1);\r\n                                    }\r\n                                }\r\n                                game.prepare = 0;\r\n                            } else {\r\n                                chessList[chessNode].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/blackchess.png'));\r\n                                chessList[chessNode].opacity = 255;\r\n                                chessList[game.lastNode].opacity = 0;\r\n                                for (var k = 0; k < game.occupied.length; k++) {\r\n                                    if (game.occupied[k] == game.lastNode) {\r\n                                        game.occupied.splice(k, k + 1);\r\n                                    }\r\n                                }\r\n                                game.prepare = 0;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                });\r\n            };\r\n        };\r\n        //初始化棋盘\r\n        for (var i = 0; i < 5; i++) {\r\n            chessList[i + 1].opacity = 255;\r\n            chessList[25 - i].opacity = 255;\r\n            chessList[25 - i].getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(cc.url.raw('resources/whitechess.png'));\r\n        }\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start() {\r\n        this.chessinit();\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}